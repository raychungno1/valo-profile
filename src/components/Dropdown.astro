---
import { Icon } from "astro-icon";

interface Props {
  id: string;
  value?: string;
  placeholder?: string;
  options?: { name: string; value: string }[];
  className?: string;
}

const { id, value, placeholder, options = [], className } = Astro.props;
const closeId = "close-" + Math.random();
const dropId = "drop-" + Math.random();
---

<div class="relative">
  <div class="input-container relative">
    <input
      id={id}
      type="text"
      class={"input py-3 px-6 rounded-sm " + (className ? className : "")}
      value={value}
      placeholder={placeholder}
    />
    <Icon
      id={closeId}
      pack="ic"
      name="baseline-close"
      class="input-close absolute w-4 h-4 right-4 top-1/2 -translate-y-1/2 text-[#818385] hover:text-white cursor-pointer"
      style="display: none;"
    />
  </div>
  <ul
    id={dropId}
    class="absolute top-0 z-40 max-h-64 w-full translate-y-14 overflow-y-scroll rounded-sm bg-[#3d4044] py-[2px] text-white"
    style="display: none;"
  >
    {
      options.map(({ name, value }, optionIdx) => (
        <li
          class="py-2 px-4 data-[hovered=true]:bg-[#7cc5c3] data-[selected=true]:bg-[#7cc5c3] data-[hovered=true]:bg-opacity-50 data-[selected=true]:bg-opacity-100"
          data-value={value}
          data-name={name}
          data-selected="false"
          data-hovered="false"
          data-idx={optionIdx}
        >
          {name}
        </li>
      ))
    }
  </ul>
</div>

<script define:vars={{ id, dropId, closeId }}>
  const inputEl = document.getElementById(id);
  const dropEl = document.getElementById(dropId);
  const options = dropEl.querySelectorAll("li");
  const closeEl = document.getElementById(closeId);

  let inputName = "";
  let inputValue = "";
  let hoverIdx = -1;
  let selectIdx = -1;

  inputEl.oninput = (e) => {
    filterSearch(e.target.value);
    closeEl.style.display = e.target.value ? "block" : "none";
  };

  inputEl.onfocus = () => {
    hoverOption(-1);
    filterSearch("");
    inputName = inputEl.value;
    inputEl.value = "";
    dropEl.style.display = "block";
    window.addEventListener("keydown", focusListener);
  };

  inputEl.onblur = () => blurInput();
  function blurInput() {
    inputEl.value = inputName;
    inputEl.dataset.value = inputValue;
    inputEl.blur();
    dropEl.style.display = "none";
    closeEl.style.display = inputEl.value ? "block" : "none";
    window.removeEventListener("keydown", focusListener);
  }

  inputEl.setOption = (value) => {
    let idx = -1;
    for (let i = 0; i < options.length; i++) {
      if (options[i].dataset.value === value) {
        idx = i;
        break;
      }
    }
    selectOption(idx);
  };

  options.forEach((option, idx) => {
    option.onmousedown = () => selectOption(idx);
    option.onmouseover = () => hoverOption(idx);
  });

  closeEl.onmouseup = () => {
    selectOption(-1);
    hoverOption(-1);
    closeEl.style.display = "none";
    if (inputEl.newOption) inputEl.newOption();
  };

  function hoverOption(i) {
    hoverIdx = +i;
    options.forEach((option, idx) => {
      option.dataset.hovered = `${hoverIdx === idx}`;
    });
  }

  function selectOption(i) {
    selectIdx = +i;
    inputName = options[selectIdx]?.dataset.name || "";
    inputEl.value = inputName;

    inputValue = options[selectIdx]?.dataset.value || "";
    inputEl.dataset.value = inputValue;

    closeEl.style.display = inputName ? "block" : "none";

    options.forEach((o, idx) => {
      o.dataset.selected = `${selectIdx === idx}`;
    });

    if (inputEl.newOption) inputEl.newOption();
  }

  function filterSearch(filter) {
    filter = filter.toLowerCase();
    let firstHighlighted = false;

    options.forEach(({ style, dataset }, idx) => {
      if (
        dataset.value.toLowerCase().indexOf(filter.toLowerCase()) > -1 ||
        dataset.name.toLowerCase().indexOf(filter.toLowerCase()) > -1
      ) {
        dataset.hovered = `${!firstHighlighted}`;
        style.display = "block";
        if (!firstHighlighted) {
          hoverIdx = idx;
          firstHighlighted = true;
        }
      } else {
        style.display = "none";
      }
    });
  }

  function hoverNextIndex(dir) {
    do {
      hoverIdx =
        (((hoverIdx + (dir === "up" ? -1 : 1)) % options.length) +
          options.length) %
        options.length;
    } while (
      options[hoverIdx].style.display &&
      options[hoverIdx].style.display === "none"
    );
    hoverOption(hoverIdx);
  }

  function focusListener(e) {
    if (e.key === "ArrowUp") {
      hoverNextIndex("up");
    } else if (e.key === "ArrowDown") {
      hoverNextIndex("down");
    } else if (e.key === "Enter") {
      selectOption(hoverIdx);
      blurInput();
    } else if (e.key === "Escape") {
      blurInput();
    }
  }
</script>

<style>
  .input {
    --outline-width: 3px;
    background-color: #3d4044;
    color: white;
    outline-offset: calc(-1 * var(--outline-width));
  }

  .input-container:hover input {
    background-color: #262b2e;
    outline: var(--outline-width) solid #2a2e31;
  }

  .input:active,
  .input:focus {
    background-color: #3d4044 !important;
    outline: var(--outline-width) solid #464a4d !important;
  }

  .input::placeholder {
    opacity: var(--placeholder-opacity);
  }
</style>
