---
import { getEntryBySlug } from "astro:content";
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";

import Layout from "../layouts/Layout.astro";
import SquareCornerCard from "../components/SquareCornerCard.astro";

import { companies } from "../utils/companies";

import valoPortraitFG from "../images/valo-portrait-fg.png";
import valoPortraitBG from "../images/valo-portrait-bg.png";
import valoPortraitHL1 from "../images/valo-portrait-highlight1.png";
import valoPortraitHL2 from "../images/valo-portrait-highlight2.png";

import islandFG from "../images/island-fg.png";
import islandMid from "../images/island-mid.png";
import islandBG from "../images/island-bg.png";
import ascentFG from "../images/ascent-fg.png";
import ascentMid from "../images/ascent-mid.png";
import ascentBG from "../images/ascent-bg.png";

const { data: ray } = await getEntryBySlug("about", "ray");
---

<Layout
  title="Ray Chung | Software Engineer"
  description="My Home Page"
  background="linear-gradient(135deg, #497797 0%, #28406a 50%, #1a1938 100%)"
>
  <section
    id="profile-pic"
    class="absolute -top-[4%] left-1/2 aspect-square h-[clamp(800px,100vh,1000px)] max-w-full -translate-x-1/2 opacity-0 md:top-0 md:left-[23%] lg:left-[28%] xl:left-1/2"
  >
    <Image
      class="valo-profile bg absolute h-full object-cover md:-translate-x-[25%]"
      src={valoPortraitBG}
      alt="Valorant Portrait BG"
      format="webp"
      quality={50}
    />
    <Image
      class="valo-profile highlight absolute h-full object-cover"
      src={valoPortraitHL1}
      alt="Valorant Portrait Highlight 1"
      format="webp"
      quality={1}
      style="--startPos: 70%; --slide-duration: 650ms; --slide-delay: 200ms;"
    />
    <Image
      class="valo-profile highlight absolute h-full object-cover"
      src={valoPortraitHL2}
      alt="Valorant Portrait Highlight 2"
      format="webp"
      quality={1}
      style="--startPos: 5%; --slide-duration: 300ms; --slide-delay: 375ms;"
    />
    <Image
      class="valo-profile absolute h-full object-cover"
      src={valoPortraitFG}
      alt="Valorant Portrait"
      format="webp"
      quality={50}
      style="--startPos: 30%;"
    />
  </section>
  <section
    class="relative mx-auto mt-[clamp(320px,40vh,400px)] max-w-[1536px] text-white backdrop-blur-sm md:z-10 md:mt-16 md:w-[90%] md:backdrop-blur-none"
  >
    <div
      id="about-info"
      class="after:content-[' '] relative mx-auto min-h-[500px] border-l-[1px] border-white border-opacity-10 bg-black bg-opacity-60 pl-6 pb-8 after:absolute after:left-3 after:top-0 after:h-full after:border-l-[1px] after:border-white after:border-opacity-20 md:mr-0 md:min-h-[600px] md:w-[450px] md:max-w-4xl md:bg-opacity-0"
    >
      <header id="about-intro" class="pr-6 text-center md:pr-0 md:text-left">
        <p
          class="pt-4 text-xl font-light uppercase tracking-wide md:absolute md:-top-12"
        >
          {ray.role}
        </p>
        <h1
          class="mb-2 -translate-y-1 font-custom-heavy text-9xl font-bold uppercase leading-[6rem] text-highlight"
        >
          {ray.name}
        </h1>
      </header>
      <nav aria-label="about-tabs" class="mt-12 flex items-center">
        <div
          class="absolute left-0 h-[9px] w-full border-t opacity-20 sm:opacity-100"
        >
        </div>
        <svg
          class="absolute left-0 w-60 -translate-x-1/2 -translate-y-1"
          viewBox="0 0 100 100"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle
            cx="50"
            cy="50"
            r="49.875"
            stroke="white"
            stroke-width="0.5"
            opacity="0.2"></circle>
          <path
            d="M47 28.25L50 25.25L53 28.25L50 31.25L47 28.25Z"
            stroke="white"
            stroke-width="0.5"
            opacity="0.2"></path>
          <path
            d="M43.25 35L50 28.25L56.75 35L50 41.75L43.25 35Z"
            stroke="white"
            stroke-width="0.5"
            opacity="0.2"></path>
          <path
            d="M35 50L50 35L65 50L50 65L35 50Z"
            stroke="white"
            stroke-width="0.5"
            opacity="0.5"></path>
          <path
            d="M85.25 14.75L50 50L85.25 85.25"
            stroke="white"
            stroke-width="0.5"
            opacity="0.2"></path>
          <path d="M50 52L52 50L50 48L48 50L50 52Z" fill="white"></path>
          <path
            d="M55.5 31V41C55.5 43.1667 56.5 48 60.5 50C56.5 52 55.5 57 55.5 59C55.5 63 55.5 67.6667 55.5 69"
            stroke="white"></path>
        </svg>
        <ul class="flex w-full items-center justify-center gap-1">
          {
            ray.about.map(({ name, pack, iconName }, tabIdx) => (
              <li
                class="group z-10 flex w-24 flex-col items-center justify-center gap-2 bg-white bg-opacity-20 p-1 hover:bg-opacity-40 active:bg-opacity-20"
                data-selected="false"
                data-tab={name.toLowerCase()}
                id={`tab-${tabIdx}`}
              >
                <div class="absolute hidden h-[2px] w-3 -translate-y-[3px] bg-white content-[''] sm:block" />
                <p class="hidden w-full py-1 text-center text-lg uppercase group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:block">
                  {name}
                </p>
                <Icon
                  class="h-10 w-full group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:mt-1 sm:group-data-[selected=true]:bg-opacity-0 sm:group-data-[selected=true]:text-white"
                  pack={pack}
                  name={iconName}
                />
              </li>
            ))
          }
        </ul>
      </nav>
      <section id="about-details" class="mt-4 pr-6 md:pr-0">
        {
          ray.about.map(({ highlight, title, desc }, tabIdx) => (
            <article
              class="group mx-auto hidden max-w-lg data-[selected=true]:block"
              data-selected="false"
              id={`detail-${tabIdx}`}
            >
              {highlight && (
                <p class="font-semibold text-highlight">{highlight}</p>
              )}
              <h1 class="mt-2 text-2xl font-bold uppercase">{title}</h1>
              <p>{desc}</p>
            </article>
          ))
        }
      </section>
    </div>
  </section>
  <section
    id="timeline"
    class="relative mx-auto mb-16 min-h-[100vh] max-w-[1536px] bg-[#091721] text-white md:w-[90%] md:border md:border-b-0"
  >
    <div
      class="relative flex aspect-video w-full items-center justify-center overflow-hidden"
    >
      <Image
        id="island-bg"
        src={islandBG}
        alt="Island BG"
        class="island absolute inset-0 pointer-events-none origin-bottom opacity-0"
        loading="eager"
      />
      <Image
        id="island-mid"
        src={islandMid}
        alt="Island Mid"
        class="island absolute inset-0 pointer-events-none origin-bottom opacity-0"
        loading="eager"
      />
      <Image
        id="island-fg"
        src={islandFG}
        alt="Island FG"
        class="island absolute z-20 inset-0 pointer-events-none origin-bottom opacity-0"
        loading="eager"
      />
      <p class="relative z-10 font-custom-heavy text-[clamp(4rem,20vw,20rem)]">
        Experience
      </p>
    </div>
    <div class="relative -mt-1 bg-[#091721] pb-12">
      {
        ray.experiences.map(({ company, value, title, date, gpa, points }) => (
          <article class="experience relative flex flex-col items-center justify-center gap-8 py-8 md:flex-row md:items-start md:gap-16 lg:gap-20 xl:gap-24">
            <div class="divider absolute left-16 flex h-full w-1 flex-col gap-3 bg-highlight-red pt-[78px] content-[''] md:left-[41%] md:pt-[34px] lg:gap-4">
              <div class="h-3 w-16 -translate-x-1/2 skew-y-[30deg] border-2 border-highlight-red content-[''] lg:h-4 lg:w-20 xl:w-24" />
              <div class="h-3 w-16 -translate-x-1/2 skew-y-[30deg] bg-highlight-red content-[''] lg:h-4 lg:w-20 xl:w-24" />
              <div class="h-3 w-16 -translate-x-1/2 skew-y-[30deg] border-2 border-highlight-red content-[''] lg:h-4 lg:w-20 xl:w-24" />
            </div>
            <div class="relative flex w-full items-center justify-center text-center md:w-2/5">
              <div class="timeline-horizontal-line absolute -right-9 hidden h-[2px] w-1/2 content-[''] md:block lg:-right-10 xl:-right-12" />
              {companies[value] ? (
                <Image
                  src={companies[value]}
                  alt={company}
                  width={150}
                  height={150}
                  format="webp"
                  class="relative opacity-50"
                />
              ) : (
                <div class="content-[' '] min-h-[150px]" />
              )}
              <div class="absolute mx-8">
                <h1 class="-mt-1 font-custom-heavy text-6xl">{company}</h1>
                <p class="text-xl font-bold uppercase text-white">{title}</p>
                <p class="text-white text-opacity-80">{date}</p>
              </div>
            </div>
            <div class="w-full md:w-3/5">
              <div class="px-[5%] md:pr-[15%] md:pt-8">
                <SquareCornerCard className="flex w-full flex-col">
                  {gpa && (
                    <div class="flex flex-col justify-between leading-none duration-300 ease-in hover:bg-white hover:bg-opacity-[.15] hover:transition-none sm:flex-row">
                      <p class="px-2 py-4">GPA</p>
                      <div class="flex text-center sm:w-1/2">
                        <div class="w-full">
                          <p class="mb-2 bg-white bg-opacity-30 py-4">
                            Cumulative
                          </p>
                          <p class="bg-highlight bg-opacity-30 py-1">
                            {gpa[0]}
                          </p>
                        </div>
                        <div class="w-full">
                          <p class="mb-2 bg-white bg-opacity-10 py-4">Major</p>
                          <p class="bg-highlight bg-opacity-20 py-1">
                            {gpa[1]}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                  {points.map((point) => (
                    <div class="px-2 py-4 leading-none duration-300 ease-in even:bg-white even:bg-opacity-10 hover:bg-white hover:bg-opacity-[.15] hover:transition-none hover:even:bg-opacity-20">
                      {point}
                    </div>
                  ))}
                </SquareCornerCard>
              </div>
            </div>
          </article>
        ))
      }
    </div>
    <div
      class="relative flex aspect-video w-full items-center justify-center overflow-hidden"
    >
      <Image
        id="ascent-bg"
        src={ascentBG}
        alt="Ascent BG"
        class="ascent absolute inset-0 pointer-events-none origin-bottom opacity-0"
        loading="eager"
      />
      <Image
        id="ascent-mid"
        src={ascentMid}
        alt="Ascent Mid"
        class="ascent absolute inset-0 pointer-events-none origin-bottom opacity-0"
        loading="eager"
      />
      <Image
        id="ascent-fg"
        src={ascentFG}
        alt="Ascent FG"
        class="ascent absolute z-20 inset-0 pointer-events-none origin-bottom opacity-0"
        loading="eager"
      />
      <div class="parallax-fade content-[' '] absolute z-20 h-full w-full">
      </div>
      <p class="relative z-10 font-custom-heavy text-[clamp(4rem,20vw,20rem)]">
        Awards
      </p>
    </div>
    <div class="relative -mt-1 bg-[#091721] pb-12">
      {
        ray.awards.map(({ company, value, title, date, gpa, points }) => (
          <article class="experience relative flex flex-col items-center justify-center gap-8 py-8 md:flex-row md:items-start md:gap-16 lg:gap-20 xl:gap-24">
            <div class="divider absolute left-16 flex h-full w-1 flex-col gap-3 bg-highlight-red pt-[78px] content-[''] md:left-[41%] md:pt-[34px] lg:gap-4">
              <div class="h-3 w-16 -translate-x-1/2 skew-y-[30deg] border-2 border-highlight-red content-[''] lg:h-4 lg:w-20 xl:w-24" />
              <div class="h-3 w-16 -translate-x-1/2 skew-y-[30deg] bg-highlight-red content-[''] lg:h-4 lg:w-20 xl:w-24" />
              <div class="h-3 w-16 -translate-x-1/2 skew-y-[30deg] border-2 border-highlight-red content-[''] lg:h-4 lg:w-20 xl:w-24" />
            </div>
            <div class="relative flex w-full items-center justify-center text-center md:w-2/5">
              <div class="timeline-horizontal-line absolute -right-9 hidden h-[2px] w-1/2 content-[''] md:block lg:-right-10 xl:-right-12" />
              {companies[value] ? (
                <Image
                  src={companies[value]}
                  alt={company}
                  width={150}
                  height={150}
                  format="webp"
                  class="relative opacity-50"
                />
              ) : (
                <div class="content-[' '] min-h-[150px]" />
              )}
              <div class="absolute mx-8">
                <h1 class="-mt-1 font-custom-heavy text-6xl">{company}</h1>
                <p class="text-xl font-bold uppercase text-white">{title}</p>
                <p class="text-white text-opacity-80">{date}</p>
              </div>
            </div>
            <div class="w-full md:w-3/5">
              <div class="px-[5%] md:pr-[15%] md:pt-8">
                <SquareCornerCard className="flex w-full flex-col">
                  {gpa && (
                    <div class="flex flex-col justify-between leading-none duration-300 ease-in hover:bg-white hover:bg-opacity-[.15] hover:transition-none sm:flex-row">
                      <p class="px-2 py-4">GPA</p>
                      <div class="flex text-center sm:w-1/2">
                        <div class="w-full">
                          <p class="mb-2 bg-white bg-opacity-30 py-4">
                            Cumulative
                          </p>
                          <p class="bg-highlight bg-opacity-30 py-1">
                            {gpa[0]}
                          </p>
                        </div>
                        <div class="w-full">
                          <p class="mb-2 bg-white bg-opacity-10 py-4">Major</p>
                          <p class="bg-highlight bg-opacity-20 py-1">
                            {gpa[1]}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                  {points.map((point) => (
                    <div class="px-2 py-4 leading-none duration-300 ease-in even:bg-white even:bg-opacity-10 hover:bg-white hover:bg-opacity-[.15] hover:transition-none hover:even:bg-opacity-20">
                      {point}
                    </div>
                  ))}
                </SquareCornerCard>
              </div>
            </div>
          </article>
        ))
      }
    </div>
  </section>

  <script>
    // Valo Profile Images
    const valoProfilePics: HTMLImageElement[] = [
      ...(document.querySelectorAll(
        ".valo-profile"
      ) as NodeListOf<HTMLImageElement>),
    ];
    const valoProfileContainer = document.getElementById("profile-pic");

    const animationPlayed = false;
    function valoProfileLoaded() {
      if (!animationPlayed && valoProfilePics.every((img) => img.complete)) {
        valoProfileContainer?.classList.remove("opacity-0");
        valoProfilePics.forEach((img) => img.classList.add("loaded"));
      }
    }

    valoProfilePics.forEach((img) => {
      img.onload = valoProfileLoaded;
    });
    valoProfileLoaded();

    // About Tabs
    const params = new URLSearchParams(location.search);
    const selectedTab = params.get("tab");
    let selectedTabFound = false;
    const tabs: HTMLElement[] = [];
    const details: HTMLElement[] = [];
    for (let i = 0; i < 4; i++) {
      const tabEl = document.getElementById(`tab-${i}`);
      const detailEl = document.getElementById(`detail-${i}`);
      if (!tabEl || !detailEl) continue;

      if (selectedTab) {
        tabEl.dataset.selected = `${selectedTab === tabEl.dataset.tab}`;
        detailEl.dataset.selected = `${selectedTab === tabEl.dataset.tab}`;
        if (selectedTab === tabEl.dataset.tab) {
          selectedTabFound = true;
        }
      }

      tabs.push(tabEl);
      details.push(detailEl);
      tabEl.addEventListener("click", (e: any) => {
        if (i === 0) {
          params.delete("tab");
          window.history.replaceState({}, "", location.pathname);
        } else {
          params.set("tab", `${tabs[i].dataset.tab}`);
          window.history.replaceState(
            {},
            "",
            `${location.pathname}?${params.toString()}`
          );
        }

        tabs.forEach((tab, tabIdx) => {
          tab.dataset.selected = `${tabIdx === i}`;
        });
        details.forEach((detail, detailIdx) => {
          detail.dataset.selected = `${detailIdx === i}`;
        });
      });
    }
    if (!selectedTabFound) {
      tabs[0].dataset.selected = `${true}`;
      details[0].dataset.selected = `${true}`;
    }

    // Island images
    const islandPics: HTMLImageElement[] = [
      ...(document.querySelectorAll(".island") as NodeListOf<HTMLImageElement>),
    ];
    const islandAnimationPlayed = false;
    function islandLoaded() {
      if (!islandAnimationPlayed && islandPics.every((img) => img.complete)) {
        islandPics.forEach((img) => img.classList.add("fade-in"));
      }
    }

    islandPics.forEach((img) => {
      img.onload = islandLoaded;
    });
    islandLoaded();

    // Ascent images
    const ascentPics: HTMLImageElement[] = [
      ...(document.querySelectorAll(".ascent") as NodeListOf<HTMLImageElement>),
    ];
    const ascentAnimationPlayed = false;
    function ascentLoaded() {
      if (!ascentAnimationPlayed && ascentPics.every((img) => img.complete)) {
        ascentPics.forEach((img) => img.classList.add("fade-in"));
      }
    }

    ascentPics.forEach((img) => {
      img.onload = ascentLoaded;
    });
    ascentLoaded();
  </script>

  <script
    is:inline
    src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"
  ></script>
  <script
    is:inline
    src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"
  ></script>
  <script is:inline>
    function parallax(id, scale = [1, 1], x = [0, 0], y = [0, 0]) {
      gsap.fromTo(
        id,
        {
          scrollTrigger: {
            scrub: 1,
            start: "top bottom",
            end: "bottom top",
          },
          scale: scale[0],
          x: x[0],
          y: y[0],
        },
        {
          scrollTrigger: {
            scrub: 1,
            start: "top bottom",
            end: "bottom top",
          },
          scale: scale[1],
          x: x[1],
          y: y[1],
        }
      );
    }
    parallax("#island-bg", [2, 1], [0, 0], ["100%", "0%"]);
    parallax("#island-mid", [1.5, 1], [0, 0], ["20%", "-20%"]);
    parallax("#island-fg", [1, 1.5], [0, 0], ["0%", "10%"]);
    parallax("#ascent-bg", [2, 1], [0, 0], ["100%", "0%"]);
    parallax("#ascent-mid", [2, 1.5], [0, 0], ["50%", "0%"]);
    parallax("#ascent-fg", [1, 1.5], [0, 0], ["0%", "10%"]);
  </script>
  <style>
    .valo-profile.loaded {
      opacity: 1;
      animation: slide-in 600ms var(--out-quint) 200ms backwards;
    }

    @media (max-width: 768px) {
      .valo-profile {
        mask-image: linear-gradient(
          to bottom,
          rgba(0, 0, 0, 1) 70%,
          rgba(0, 0, 0, 0) 100%
        );
        -webkit-mask-image: linear-gradient(
          to bottom,
          rgba(0, 0, 0, 1) 70%,
          rgba(0, 0, 0, 0) 100%
        );
      }
      .valo-profile.highlight {
        mask-image: linear-gradient(
          to bottom,
          rgba(0, 0, 0, 1) 60%,
          rgba(0, 0, 0, 0) 70%
        );
        -webkit-mask-image: linear-gradient(
          to bottom,
          rgba(0, 0, 0, 1) 60%,
          rgba(0, 0, 0, 0) 70%
        );
      }
    }

    .valo-profile.highlight.loaded {
      opacity: 0;
      animation: slide-in var(--slide-duration) var(--out-quint)
          var(--slide-delay) backwards,
        fade-out 300ms ease-in-out 700ms;
    }

    .valo-profile.bg.loaded {
      opacity: 1;
      animation: fade-in 300ms ease-in-out;
    }

    @keyframes slide-in {
      0% {
        opacity: 0;
        transform: translateX(var(--startPos));
      }
      100% {
        opacity: 1;
        transform: translateX(0);
      }
    }

    .experience:first-child .divider {
      background: linear-gradient(
        #091721 0%,
        rgb(var(--color-highlight-red)) 25%
      );
    }

    .experience:last-child .divider {
      background: linear-gradient(
        rgb(var(--color-highlight-red)) 75%,
        #091721 100%
      );
    }

    .timeline-horizontal-line {
      background: linear-gradient(
        90deg,
        #091721 0%,
        rgb(var(--color-highlight-red)) 25%
      );
    }

    .parallax-fade {
      background: linear-gradient(transparent 80%, #091721 100%);
    }
  </style>
</Layout>
