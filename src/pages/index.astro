---
import { Icon } from "astro-icon";
import Layout from "../layouts/Layout.astro";
import SquareCornerCard from "../components/SquareCornerCard.astro";
import ytLogo from "../images/yt-logo.jpg";
import valoPortraitFG from "../images/valo-portrait-fg.png";
import valoPortraitBG from "../images/valo-portrait-bg.png";
import valoPortraitHL1 from "../images/valo-portrait-highlight1.png";
import valoPortraitHL2 from "../images/valo-portrait-highlight2.png";

const intro = {
  name: "Ray Chung",
  role: "Software Engineer",
  desc: "I'm a software engineer specializing in full stack development. Currently based in New York City, I'm building out real-time financial solutions at Bloomberg.",
};

interface AboutDetail {
  company: string;
  title: string;
  date: string;
  points: string[];
  gpa?: string[];
}

const experiences: AboutDetail[] = [
  {
    company: "JP Morgan Chase",
    title: "Software Engineer Intern",
    date: "June - August 2022",
    points: [
      "Developed a web application with Java Spring Boot, Node, & React to summarize loan application data",
      "Within one week of use, tool identified a bottleneck affecting 60% of automated loan applications, increasing automated loan approvals by 10%",
      "Implemented a solution to store loan application data in the cloud, creating a schema & automating data storage in an Oracle database",
      "Decreased app maintenance 33% by developing a Spring Boot Admin monitoring tool for microservices",
      "Selected as a top 2 intern project among 113 interns and 33 teams",
    ],
  },
  {
    company: "Ohio State University",
    title: "B.S. Computer Science",
    date: "August 2019 - December 2022",
    gpa: ["3.9", "4.0"],
    points: [
      "Graduated Summa Cum Laude with a B.S. in Computer Science & Engineering",
      "AI specialization with coursework Neural Networks, NLP, Computer Vision",
      "NLP research in chain-of-thought prompting",
    ],
  },
];

const awards: AboutDetail[] = [
  {
    company: "ASA DataFest",
    title: "Winner",
    date: "March 2021",
    points: [
      "Won best visualization award among 35 teams",
      "Performed data analysis with RStudio, providing business insights to an anonymous data provider",
      "Used statistical techniques to identify issues and developed actionable conclusions",
    ],
  },
  {
    company: "PLTW Engineering",
    title: "Winner",
    date: "August 2018 - May 2019",
    points: [
      "Won audience choice award among 30 teams",
      "Cooperated in a team of 4 to produce a garage door add-on that automatically operated a garage door",
      "Developed a fully functional app through Swift using XCode with a customizable, toggleable geo-fence",
    ],
  },
  {
    company: "Boy Scouts of America",
    title: "Eagle Scout, Gold Palm",
    date: "May 2016",
    points: [
      "Eagle Project - Refurbished a Tzu Chi recycling center in Shanghai, China",
      "Earned Gold Palm beyond rank of Eagle",
      "Order of the Arrow (OA) member",
    ],
  },
];

const aboutTabs = [
  {
    name: "Experience",
    pack: "bi",
    iconName: "people-fill",
    details: experiences,
  },
  { name: "Awards", pack: "bi", iconName: "award-fill", details: awards },
  { name: "Hobbies", pack: "ion", iconName: "game-controller", details: [] },
];
---

<Layout title="Ray Chung | Software Engineer">
  <img
    id="valo-profile__bg"
    class="opacity-0 absolute top-0 left-1/2 z-0 h-[100vh] -translate-x-1/2 object-cover md:fixed md:left-1/4 md:-translate-x-[55%]"
    src={valoPortraitBG}
    alt="Valorant Portrait BG"
  />    
  <img
    id="valo-profile__highlight1"
    class="opacity-0 absolute -top-[5vh] left-1/2 z-0 h-[105vh] object-cover sm:top-0 sm:h-[100vh] md:fixed md:left-1/4"
    src={valoPortraitHL1}
    alt="Valorant Portrait Highlight 1"
  />
  <img
    id="valo-profile__highlight2"
    class="opacity-0 absolute -top-[5vh] left-1/2 z-0 h-[105vh] object-cover sm:top-0 sm:h-[100vh] md:fixed md:left-1/4"
    src={valoPortraitHL2}
    alt="Valorant Portrait Highlight 2"
  />
  <img
    id="valo-profile"
    class="opacity-0 absolute -top-[5vh] left-1/2 z-0 h-[105vh] object-cover sm:top-0 sm:h-[100vh] md:fixed md:left-1/4"
    src={valoPortraitFG}
    alt="Valorant Portrait"
  />
  <div
    class="relative mx-auto mt-[35vh] my-10 w-[90%] max-w-7xl text-white md:mt-10"
  >
    <div
      id="about-info"
      class="mx-auto flex max-w-2xl flex-col gap-12 back bg-black bg-opacity-60 pl-6 pr-3 my-8 pb-8 backdrop-blur-sm md:mr-0 md:w-3/5 md:max-w-4xl md:bg-opacity-20 lg:bg-transparent lg:backdrop-blur-none border-l-[1px] border-opacity-10 border-white after:content-[' '] after:absolute after:h-full after:border-l-2 after:border-white after:border-opacity-20 after:left-3"
    >
      <div id="about-intro" class="text-center text-xl md:text-left pt-4">
        <p class="font-light uppercase tracking-wide">{intro.role}</p>
        <p
          class="font-custom-heavy text-9xl font-bold uppercase leading-[6rem] text-highlight mb-2"
        >
          {intro.name}
        </p>
        <p class="text-left text-lg font-semibold text-highlight">
          {intro.desc}
        </p>
      </div>
      
      <div id="about-tabs" class="flex items-center justify-center gap-1">
        <div class="absolute hidden h-[9px] w-full border-t sm:block left-0"></div>
        <!-- <div
          class="absolute my-8 h-14 w-full border-t border-b before:absolute before:-top-[2px] before:h-[58px] before:w-4 before:border-t-[3px] before:border-b-[3px] before:content-[''] after:absolute after:-top-[2px] after:right-0 after:h-[58px] after:w-4 after:border-t-[3px] after:border-b-[3px] after:content-[''] sm:hidden"
        >
        </div> -->
        <svg class="absolute left-0 -translate-x-1/2 w-60 -translate-y-1" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="50" cy="50" r="49.875" stroke="white" stroke-width="0.25" opacity="0.2"/>
          <path d="M47 28.25L50 25.25L53 28.25L50 31.25L47 28.25Z" stroke="white" stroke-width="0.25" opacity="0.2"/>
          <path d="M43.25 35L50 28.25L56.75 35L50 41.75L43.25 35Z" stroke="white" stroke-width="0.25" opacity="0.2"/>
          <path d="M35 50L50 35L65 50L50 65L35 50Z" stroke="white" stroke-width="0.5" opacity="0.5"/>
          <path d="M85.25 14.75L50 50L85.25 85.25" stroke="white" stroke-width="0.25" opacity="0.2"/>
          <path d="M50 52L52 50L50 48L48 50L50 52Z" fill="white"/>
          <path d="M55.5 31V41C55.5 43.1667 56.5 48 60.5 50C56.5 52 55.5 57 55.5 59C55.5 63 55.5 67.6667 55.5 69" stroke="white" />
        </svg>
        {
          aboutTabs.map(({ name, pack, iconName }, tabIdx) => (
            <div
              class="group z-10 flex w-1/3 max-w-[8rem] flex-col items-center justify-center gap-2 bg-white bg-opacity-20 p-1 hover:bg-opacity-40 active:bg-opacity-20"
              data-selected={`${tabIdx === 0}`}
              data-tab={name.toLowerCase()}
              id={`tab-${tabIdx}`}
            >
              <div class="absolute hidden h-[3px] w-4 -translate-y-[4px] bg-white content-[''] sm:block" />
              <p class="hidden w-full py-1 text-center text-lg uppercase group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:block">
                {name}
              </p>
              <Icon
                class="h-12 w-full group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:group-data-[selected=true]:bg-opacity-0 sm:group-data-[selected=true]:text-white"
                pack={pack}
                name={iconName}
              />
            </div>
          ))
        }
      </div>
      <div id="about-details">
        {
          aboutTabs.map(({ name, details }, tabIdx) => (
            <div
              class="group hidden data-[selected=true]:block"
              data-selected={`${tabIdx === 0}`}
              id={`detail-${tabIdx}`}
            >
              <p class="mb-4 pl-1 text-4xl font-bold tracking-wider text-highlight">
                {name}
              </p>
              {name !== "Hobbies" ? (
                <ul class="px-1 flex flex-col">
                  {details.map(
                    ({ company, title, date, gpa, points }, detailIdx) => (
                      <li>
                        <div class="mb-4 flex w-full flex-col justify-between sm:flex-row">
                          <div>
                            <p class="text-2xl font-bold  leading-none">
                              {company}
                            </p>
                            <p class="text-sm uppercase tracking-wider">
                              {title}
                            </p>
                          </div>
                          <p class="leading-none opacity-75">{date}</p>
                        </div>
                        <SquareCornerCard
                          className={`flex w-full flex-col ${
                            detailIdx !== details.length - 1 ? "mb-10" : ""
                          }`}
                        >
                          {gpa && (
                            <div class="flex flex-col justify-between leading-none duration-300 ease-in hover:bg-white hover:bg-opacity-[.15] hover:transition-none sm:flex-row">
                              <p class="px-2 py-4">GPA</p>
                              <div class="flex text-center sm:w-1/2">
                                <div class="w-full">
                                  <p class="mb-2 bg-white bg-opacity-30 py-4">
                                    Cumulative
                                  </p>
                                  <p class="bg-highlight bg-opacity-30 py-1">
                                    {gpa[0]}
                                  </p>
                                </div>
                                <div class="w-full">
                                  <p class="mb-2 bg-white bg-opacity-10 py-4">
                                    Major
                                  </p>
                                  <p class="bg-highlight bg-opacity-20 py-1">
                                    {gpa[1]}
                                  </p>
                                </div>
                              </div>
                            </div>
                          )}
                          {points.map((point) => (
                            <div class="px-2 py-4 leading-none duration-300 ease-in even:bg-white even:bg-opacity-10 hover:bg-white hover:bg-opacity-[.15] hover:transition-none hover:even:bg-opacity-20">
                              {point}
                            </div>
                          ))}
                        </SquareCornerCard>
                      </li>
                    )
                  )}
                </ul>
              ) : (
                <SquareCornerCard className="mb-12 p-4 m-1">
                  <p class="mb-4 w-full text-2xl font-bold">Youtube</p>
                  <a
                    href="https://www.youtube.com/c/legendaray"
                    target="_blank"
                    rel="noreferrer"
                  >
                    <div class="bg-opacity flex items-center gap-2 bg-white bg-opacity-10 duration-300 ease-in hover:bg-white hover:bg-opacity-20 hover:transition-none active:bg-opacity-10 sm:gap-6">
                      <img src={ytLogo} alt="Youtube Logo" />
                      <div>
                        <div class="text-2xl font-bold">Legendaray</div>
                        <div class="text-sm uppercase">
                          Check out my channel!
                        </div>
                      </div>
                    </div>
                  </a>
                </SquareCornerCard>
                <SquareCornerCard className="p-4  m-1">
                  <p class="mb-4 w-full text-2xl font-bold">Origami</p>
                  <iframe
                    width="100%"
                    src="https://www.youtube.com/embed/Suly8B2P6fc"
                    title="YouTube video player"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen
                    class="aspect-video"
                  />
                </SquareCornerCard>
              )}
            </div>
          ))
        }
      </div>
    </div>
  </div>
  <div>_</div>
</Layout>

<script>
  // About Tabs
  const params = new URLSearchParams(location.search);
  const selectedTab = params.get("tab");
  let selectedTabFound = false;
  const tabs: HTMLElement[] = [];
  const details: HTMLElement[] = [];
  for (let i = 0; i < 4; i++) {
    const tabEl = document.getElementById(`tab-${i}`);
    const detailEl = document.getElementById(`detail-${i}`);
    if (!tabEl || !detailEl) continue;

    if (selectedTab) {
      tabEl.dataset.selected = `${selectedTab === tabEl.dataset.tab}`;
      detailEl.dataset.selected = `${selectedTab === tabEl.dataset.tab}`;
      if (selectedTab === tabEl.dataset.tab) {
        selectedTabFound = true;
      }
    }

    tabs.push(tabEl);
    details.push(detailEl);
    tabEl.addEventListener("click", (e: any) => {
      if (i === 0) {
        params.delete("tab");
        window.history.replaceState({}, "", location.pathname);
      } else {
        params.set("tab", `${tabs[i].dataset.tab}`);
        window.history.replaceState(
          {},
          "",
          `${location.pathname}?${params.toString()}`
        );
      }

      tabs.forEach((tab, tabIdx) => {
        tab.dataset.selected = `${tabIdx === i}`;
      });
      details.forEach((detail, detailIdx) => {
        detail.dataset.selected = `${detailIdx === i}`;
      });
    });
  }
  if (!selectedTabFound) {
    tabs[0].dataset.selected = `${true}`;
    details[0].dataset.selected = `${true}`;
  }

  // Valo Profile Images
  const valoProfilePics: HTMLImageElement[] = [];
  const animationPlayed = false;
  function valoProfileLoaded() {
    if (!animationPlayed && valoProfilePics.every((img) => img.complete)) {
      valoProfilePics.forEach((img) => img.classList.add(img.id))
    }
  }
  ["valo-profile", "valo-profile__highlight1", "valo-profile__highlight2", "valo-profile__bg"].forEach((id) => {
    const el = document.getElementById(id) as HTMLImageElement;
    if (!el) return;
    el.onload = valoProfileLoaded;
    valoProfilePics.push(el);
  })
  valoProfileLoaded();
</script>

<style>
  .video-background {
    position: fixed;
    inset: 0;
    top: -1%;
    overflow: hidden;
    width: 100vw;
    height: 100vh;
    scale: 1.15;
  }

  .video-background iframe {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100vw;
    height: 100vh;
    transform: translate(-50%, -50%);
  }

  @media (min-aspect-ratio: 16/9) {
    .video-background iframe {
      /* height = 100 * (9 / 16) = 56.25 */
      height: 56.25vw;
    }
  }
  @media (max-aspect-ratio: 16/9) {
    .video-background iframe {
      /* width = 100 / (9 / 16) = 177.777777 */
      width: 177.78vh;
    }
  }

  @media (min-width: 1625px) {
    .valo-profile,
    .valo-profile__highlight1,
    .valo-profile__highlight2,
    .valo-profile__bg {
      left: calc(50% - 25rem);
    }
  }

  .valo-profile {
    --startPos: -20%;
    transform: translateX(-50%);
    opacity: 1;
    animation: slide-in 600ms var(--out-quint) 200ms backwards;
  }

  .valo-profile__highlight1 {
    --startPos: 10%;
    transform: translateX(-50%);
    opacity: 0;
    animation: slide-in 650ms var(--in-out-quint) 200ms backwards,
      fade-out 300ms ease-in-out 700ms;
  }

  .valo-profile__highlight2 {
    --startPos: -45%;
    transform: translateX(-50%);
    opacity: 0;
    animation: slide-in 300ms var(--out-quint) 375ms backwards,
      fade-out 300ms ease-in-out 700ms;
  }

  .valo-profile__bg {
    opacity: 1;
    animation: fade-in 300ms ease-in-out;
  }

  @keyframes slide-in {
    0% {
      opacity: 0;
      transform: translateX(var(--startPos));
    }
    100% {
      opacity: 1;
      transform: translateX(-50%);
    }
  }
</style>
