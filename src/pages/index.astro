---
import { getEntryBySlug } from "astro:content";
import { Image } from '@astrojs/image/components';
import { Icon } from "astro-icon";

import Layout from "../layouts/Layout.astro";

import valoPortraitFG from "../images/valo-portrait-fg.png";
import valoPortraitBG from "../images/valo-portrait-bg.png";
import valoPortraitHL1 from "../images/valo-portrait-highlight1.png";
import valoPortraitHL2 from "../images/valo-portrait-highlight2.png";

const { data: ray } = await getEntryBySlug("about", "ray");
---
<Layout title="Ray Chung | Software Engineer" description="My Home Page" background="linear-gradient(135deg, #497797 0%, #28406a 50%, #1a1938 100%)">
  <Image
    class="valo-profile bg opacity-0 absolute -top-[5vh] left-1/2 z-0 h-[105vh] min-h-[800px] object-cover -translate-x-1/2 sm:top-0 sm:h-[100vh] md:fixed md:left-[22%] lg:left-[28%] xl:left-1/2 md:-translate-x-[75%]"
    src={valoPortraitBG}
    alt="Valorant Portrait BG"
    format="webp"
    quality={50}
  />
  <Image
    class="valo-profile highlight opacity-0 absolute -top-[5vh] left-1/2 z-0 h-[105vh] min-h-[800px] object-cover -translate-x-1/2 sm:top-0 sm:h-[100vh] md:fixed md:left-[22%] lg:left-[28%] xl:left-1/2"
    src={valoPortraitHL1}
    alt="Valorant Portrait Highlight 1"
    format="webp"
    quality={1}
    style="--startPos: -10%; --slide-duration: 650ms; --slide-delay: 200ms;"
  />
  <Image
    class="valo-profile highlight opacity-0 absolute -top-[5vh] left-1/2 z-0 h-[105vh] min-h-[800px] object-cover -translate-x-1/2 sm:top-0 sm:h-[100vh] md:fixed md:left-[22%] lg:left-[28%] xl:left-1/2"
    src={valoPortraitHL2}
    alt="Valorant Portrait Highlight 2"
    format="webp"
    quality={1}
    style="--startPos: -45%; --slide-duration: 300ms; --slide-delay: 375ms;"
  />
  <Image
    class="valo-profile opacity-0 absolute -top-[5vh] left-1/2 z-0 h-[105vh] min-h-[800px] object-cover -translate-x-1/2 sm:top-0 sm:h-[100vh] md:fixed md:left-[22%] lg:left-[28%] xl:left-1/2"
    src={valoPortraitFG}
    alt="Valorant Portrait"
    format="webp"
    quality={50}
    style="--startPos: -20%;"
  />
  <div
    class="relative mx-auto mt-[max(280px,50vh)] my-10 w-full md:w-[90%] max-w-[1536px] text-white md:mt-16"
  >
    <div
      id="about-info"
      class="mx-auto bg-black bg-opacity-60 pl-6 pb-8 backdrop-blur-sm border-l-[1px] border-opacity-10 border-white md:mr-0 md:w-[450px] md:max-w-4xl md:bg-opacity-0 md:backdrop-blur-none after:content-[' '] after:absolute after:h-full after:border-l-[1px] after:border-white after:border-opacity-20 after:left-3 after:top-0"
    >
      <div id="about-intro" class="text-center md:text-left pr-6 md:pr-0">
        <p class="pt-4 md:pt-0 md:absolute md:-top-8 text-xl font-light uppercase tracking-wide">{ray.role}</p>
        <h1
          class="-translate-y-1 font-custom-heavy text-9xl font-bold uppercase leading-[6rem] text-highlight mb-2"
        >
          {ray.name}
        </h1>
      </div>
      <div id="about-tabs" class="flex items-center mt-12">
        <div class="absolute left-0 h-[9px] w-full border-t opacity-20 sm:opacity-100"></div>
        <svg class="absolute left-0 -translate-x-1/2 w-60 -translate-y-1" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="50" cy="50" r="49.875" stroke="white" stroke-width="0.5" opacity="0.2"/>
          <path d="M47 28.25L50 25.25L53 28.25L50 31.25L47 28.25Z" stroke="white" stroke-width="0.5" opacity="0.2"/>
          <path d="M43.25 35L50 28.25L56.75 35L50 41.75L43.25 35Z" stroke="white" stroke-width="0.5" opacity="0.2"/>
          <path d="M35 50L50 35L65 50L50 65L35 50Z" stroke="white" stroke-width="0.5" opacity="0.5"/>
          <path d="M85.25 14.75L50 50L85.25 85.25" stroke="white" stroke-width="0.5" opacity="0.2"/>
          <path d="M50 52L52 50L50 48L48 50L50 52Z" fill="white"/>
          <path d="M55.5 31V41C55.5 43.1667 56.5 48 60.5 50C56.5 52 55.5 57 55.5 59C55.5 63 55.5 67.6667 55.5 69" stroke="white" />
        </svg>
        <ul class="w-full flex items-center justify-center gap-1">
          {
            ray.about.map(({ name, pack, iconName }, tabIdx) => (
              <li
                class="group z-10 flex w-24 flex-col items-center justify-center gap-2 bg-white bg-opacity-20 p-1 hover:bg-opacity-40 active:bg-opacity-20"
                data-selected="false"
                data-tab={name.toLowerCase()}
                id={`tab-${tabIdx}`}
              >
                <div class="absolute hidden h-[2px] w-3 -translate-y-[3px] bg-white content-[''] sm:block" />
                <p class="hidden w-full py-1 text-center text-lg uppercase group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:block">
                  {name}
                </p>
                <Icon
                  class="h-10 w-full sm:mt-1 group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:group-data-[selected=true]:bg-opacity-0 sm:group-data-[selected=true]:text-white"
                  pack={pack}
                  name={iconName}
                />
              </li>
            ))
          }
        </ul>
      </div>
      <div id="about-details" class="mt-4 pr-6 md:pr-0">
        {
          ray.about.map(({ highlight, title, desc }, tabIdx) => (
            <div
              class="group hidden data-[selected=true]:block max-w-lg mx-auto"
              data-selected="false"
              id={`detail-${tabIdx}`}
            >
              {highlight && (
                <p class="text-left font-semibold text-highlight">
                  {highlight}
                </p>
              )}
              <p class="mt-2 text-2xl font-bold uppercase">{title}</p>
              <p class="text-left">
                {desc}
              </p>
              <!--<p class="mb-4 pl-1 text-4xl font-bold tracking-wider text-highlight">
                {name}
              </p>
              {name !== "Hobbies" ? (
                <ul class="px-1 flex flex-col">
                  {details.map(
                    ({ company, title, date, gpa, points }, detailIdx) => (
                      <li>
                        <div class="mb-4 flex w-full flex-col justify-between sm:flex-row">
                          <div>
                            <p class="text-2xl font-bold  leading-none">
                              {company}
                            </p>
                            <p class="text-sm uppercase tracking-wider">
                              {title}
                            </p>
                          </div>
                          <p class="leading-none opacity-75">{date}</p>
                        </div>
                        <SquareCornerCard
                          className={`flex w-full flex-col ${
                            detailIdx !== details.length - 1 ? "mb-10" : ""
                          }`}
                        >
                          {gpa && (
                            <div class="flex flex-col justify-between leading-none duration-300 ease-in hover:bg-white hover:bg-opacity-[.15] hover:transition-none sm:flex-row">
                              <p class="px-2 py-4">GPA</p>
                              <div class="flex text-center sm:w-1/2">
                                <div class="w-full">
                                  <p class="mb-2 bg-white bg-opacity-30 py-4">
                                    Cumulative
                                  </p>
                                  <p class="bg-highlight bg-opacity-30 py-1">
                                    {gpa[0]}
                                  </p>
                                </div>
                                <div class="w-full">
                                  <p class="mb-2 bg-white bg-opacity-10 py-4">
                                    Major
                                  </p>
                                  <p class="bg-highlight bg-opacity-20 py-1">
                                    {gpa[1]}
                                  </p>
                                </div>
                              </div>
                            </div>
                          )}
                          {points.map((point) => (
                            <div class="px-2 py-4 leading-none duration-300 ease-in even:bg-white even:bg-opacity-10 hover:bg-white hover:bg-opacity-[.15] hover:transition-none hover:even:bg-opacity-20">
                              {point}
                            </div>
                          ))}
                        </SquareCornerCard>
                      </li>
                    )
                  )}
                </ul>
              ) : (
                <SquareCornerCard className="mb-12 p-4 m-1">
                  <p class="mb-4 w-full text-2xl font-bold">Youtube</p>
                  <a
                    href="https://www.youtube.com/c/legendaray"
                    target="_blank"
                    rel="noreferrer"
                  >
                    <div class="bg-opacity flex items-center gap-2 bg-white bg-opacity-10 duration-300 ease-in hover:bg-white hover:bg-opacity-20 hover:transition-none active:bg-opacity-10 sm:gap-6">
                      <img src={ytLogo} alt="Youtube Logo" />
                      <div>
                        <div class="text-2xl font-bold">Legendaray</div>
                        <div class="text-sm uppercase">
                          Check out my channel!
                        </div>
                      </div>
                    </div>
                  </a>
                </SquareCornerCard>
                <SquareCornerCard className="p-4  m-1">
                  <p class="mb-4 w-full text-2xl font-bold">Origami</p>
                  <iframe
                    width="100%"
                    src="https://www.youtube.com/embed/Suly8B2P6fc"
                    title="YouTube video player"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen
                    class="aspect-video"
                  />
                </SquareCornerCard>
              )}-->
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  // Valo Profile Images
  const valoProfilePics: HTMLImageElement[] = [
    ...(document.querySelectorAll(
      ".valo-profile"
    ) as NodeListOf<HTMLImageElement>),
  ];
  
  const animationPlayed = false;
  function valoProfileLoaded() {
    if (!animationPlayed && valoProfilePics.every((img) => img.complete)) {
      valoProfilePics.forEach((img) => img.classList.add("loaded"));
    }
  }

  valoProfilePics.forEach((img) => {
    img.onload = valoProfileLoaded;
  });
  valoProfileLoaded();

  // About Tabs
  const params = new URLSearchParams(location.search);
  const selectedTab = params.get("tab");
  let selectedTabFound = false;
  const tabs: HTMLElement[] = [];
  const details: HTMLElement[] = [];
  for (let i = 0; i < 4; i++) {
    const tabEl = document.getElementById(`tab-${i}`);
    const detailEl = document.getElementById(`detail-${i}`);
    if (!tabEl || !detailEl) continue;

    if (selectedTab) {
      tabEl.dataset.selected = `${selectedTab === tabEl.dataset.tab}`;
      detailEl.dataset.selected = `${selectedTab === tabEl.dataset.tab}`;
      if (selectedTab === tabEl.dataset.tab) {
        selectedTabFound = true;
      }
    }

    tabs.push(tabEl);
    details.push(detailEl);
    tabEl.addEventListener("click", (e: any) => {
      if (i === 0) {
        params.delete("tab");
        window.history.replaceState({}, "", location.pathname);
      } else {
        params.set("tab", `${tabs[i].dataset.tab}`);
        window.history.replaceState(
          {},
          "",
          `${location.pathname}?${params.toString()}`
        );
      }

      tabs.forEach((tab, tabIdx) => {
        tab.dataset.selected = `${tabIdx === i}`;
      });
      details.forEach((detail, detailIdx) => {
        detail.dataset.selected = `${detailIdx === i}`;
      });
    });
  }
  if (!selectedTabFound) {
    tabs[0].dataset.selected = `${true}`;
    details[0].dataset.selected = `${true}`;
  }
</script>


<style>
  .valo-profile.loaded {
    opacity: 1;
    animation: slide-in 600ms var(--out-quint) 200ms backwards;
  }

  .valo-profile.highlight.loaded {
    opacity: 0;
    animation: slide-in var(--slide-duration) var(--out-quint)
        var(--slide-delay) backwards,
      fade-out 300ms ease-in-out 700ms;
  }

  .valo-profile.bg.loaded {
    opacity: 1;
    animation: fade-in 300ms ease-in-out;
  }

  @keyframes slide-in {
    0% {
      opacity: 0;
      transform: translateX(var(--startPos));
    }
    100% {
      opacity: 1;
      transform: translateX(-50%);
    }
  }

  @media (max-width: 768px) {
    .valo-profile {
      mask-image: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 1) 60%,
        rgba(0, 0, 0, 0) 100%
      );
      -webkit-mask-image: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 1) 60%,
        rgba(0, 0, 0, 0) 100%
      );
    }
  }
</style>