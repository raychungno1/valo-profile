---
import { Icon } from "astro-icon";
import Layout from "../layouts/Layout.astro";
import homeBG from "../images/home-bg.png";

const intro = {
  name: "Ray Chung",
  role: "Software Engineer",
  desc: "I'm a software developer studying Computer Science and Engineering at the Ohio State University. I love both front-end and back-end development, and have a big interest in machine learning and AI.",
};

const aboutTabs = [
  { name: "Experience", pack: "bi", iconName: "people-fill" },
  { name: "Education", pack: "ion", iconName: "school-sharp" },
  { name: "Awards", pack: "bi", iconName: "award-fill" },
  { name: "Hobbies", pack: "ion", iconName: "game-controller" },
];
---

<Layout title="Ray Chung | Software Engineer">
  <div class="video-background">
    <div id="video-player"></div>
  </div>
  <img
    id="video-placeholder"
    src={homeBG}
    alt="Video Placeholder"
    class="fixed inset-0 -top-[1%] h-full w-full scale-[1.15] object-cover transition-all duration-500 data-[visible=false]:opacity-0"
    data-visible="true"
  />
  <div class="relative mx-auto my-10 w-[80%] max-w-7xl text-white">
    <div
      class="mx-auto flex max-w-2xl flex-col gap-12 bg-black bg-opacity-60 px-3 py-8 backdrop-blur-sm lg:mx-0 lg:w-[768px]"
    >
      <div id="about-intro" class="text-center text-xl lg:text-left">
        <p class="font-light uppercase tracking-wide">{intro.role}</p>
        <p class="-m-1 text-7xl font-bold uppercase text-highlight">
          {intro.name}
        </p>
        <div
          class="relative my-8 h-4 border-t border-b before:absolute before:-top-[2px] before:-left-3 before:h-[18px] before:w-4 before:border-t-[3px] before:border-b-[3px] before:content-[''] after:absolute after:-top-[2px] after:-right-3 after:h-[18px] after:w-4 after:border-t-[3px] after:border-b-[3px] after:content-['']"
        >
        </div>
        <p class="text-left text-lg text-highlight">{intro.desc}</p>
      </div>
      <div id="about-tabs" class="flex items-center justify-center gap-1">
        <div class="absolute hidden h-2 w-full border-t sm:block"></div>
        {
          aboutTabs.map(({ name, pack, iconName }, i) => (
            <div
              class="group flex w-1/4 max-w-[8rem] flex-col items-center justify-center gap-2 bg-white bg-opacity-20 p-1 hover:bg-opacity-40 active:bg-opacity-20"
              data-selected={`${i === 0}`}
              id={`tab-${i}`}
            >
              <div class="absolute hidden h-[3px] w-4 -translate-y-[3px] bg-white content-[''] sm:block" />
              <p class="hidden w-full p-2 text-center text-lg font-bold uppercase group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:block">
                {name}
              </p>
              <Icon
                class="h-12 w-full group-data-[selected=true]:bg-white group-data-[selected=true]:bg-opacity-50 group-data-[selected=true]:text-[#0c1428] sm:mt-3 sm:group-data-[selected=true]:bg-opacity-0 sm:group-data-[selected=true]:text-white"
                pack={pack}
                name={iconName}
              />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>

<script is:inline>
  // Loads the IFrame Player API code asynchronously.
  var tag = document.createElement("script");

  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName("script")[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Creates an <iframe> after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player("video-player", {
      height: "100%",
      width: "100%",
      videoId: "KcFY64yX2bI",
      playerVars: {
        autoplay: 1,
        controls: 0,
        enablejsapi: 1,
        iv_load_policy: 3,
        loop: 1,
        modestbranding: 1,
        mute: 1,
        playsinline: 1,
        rel: 0,
        showinfo: 0,
        origin: window.location.origin,
      },
      events: {
        onReady: onPlayerReady,
      },
    });
  }

  // API will call this function when the video player is ready.
  function onPlayerReady(event) {
    event.target.playVideo();
    player.addEventListener("onStateChange", onStateChange);
  }

  function onStateChange(event) {
    const videoPlaceholder = document.getElementById("video-placeholder");
    if (event.data === 1) {
      videoPlaceholder.dataset.visible = "false";
    } else {
      videoPlaceholder.dataset.visible = "true";
    }
  }
</script>

<script>
  // About Tabs
  const tabs: HTMLElement[] = [];
  for (let i = 0; i < 4; i++) {
    const el = document.getElementById(`tab-${i}`);
    if (!el) continue;

    tabs.push(el);
    el.addEventListener("click", () => {
      tabs.forEach((tab, tabIdx) => {
        tab.dataset.selected = `${tabIdx === i}`;
      });
    });
  }
  console.log(tabs);
</script>

<style>
  .video-background {
    position: fixed;
    inset: 0;
    top: -1%;
    overflow: hidden;
    width: 100vw;
    height: 100vh;
    scale: 1.15;
  }

  .video-background iframe {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100vw;
    height: 100vh;
    transform: translate(-50%, -50%);
  }

  @media (min-aspect-ratio: 16/9) {
    .video-background iframe {
      /* height = 100 * (9 / 16) = 56.25 */
      height: 56.25vw;
    }
  }
  @media (max-aspect-ratio: 16/9) {
    .video-background iframe {
      /* width = 100 / (9 / 16) = 177.777777 */
      width: 177.78vh;
    }
  }
</style>
